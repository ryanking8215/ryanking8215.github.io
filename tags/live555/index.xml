<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>live555 on RyanKing&#39;s Blog</title>
    <link>http://ryanking8215.github.io/tags/live555/</link>
    <description>Recent content in live555 on RyanKing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Oct 2014 22:13:35 +0800</lastBuildDate>
    
	<atom:link href="http://ryanking8215.github.io/tags/live555/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Live555源码分析</title>
      <link>http://ryanking8215.github.io/2014/live555-analyze/</link>
      <pubDate>Sat, 04 Oct 2014 22:13:35 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/live555-analyze/</guid>
      <description>Source Live555下FramedSource是继承于MediaSource的类，表示提供帧数据源, 主要用“模板模式&amp;rdquo;实现了getNextFrame()接口，其中doGetNextFrame()需要子类去实现。
Source级联 大部分的Source类都继承自FramedFilter类而不是FramedSource， FramedFilter本身是一个FramedSource类，而且可以有一个FramedSource类对象作为input， 这样FramedFilter就可以级联起来，对用户使用来说， live555不主动定义现有的FramedSource，因为每个用户的数据来源广泛， 用户只要实现了自己的FrameSouce类，然后就可以使用现有的FramedFilter类做处理。
例如，我只要实现自己的FrameSource类，或从网络自有协议获取数据， 或从设备直接编码得到数据， 然后通过live555的现有H264VideoStreamFramer-&amp;gt;H264FUAxxx-&amp;gt;H264RTPSink,这样利用live555，实现h264的rtp封装。
补充 如果直接从RTP流获取数据作为Source,live555有现成的RtpSource和N种媒体类型对应的RtpSource子类。
如果从设备直接编码数据，可以继承DeviceSource类，这是live555预先定义好的抽象类.</description>
    </item>
    
  </channel>
</rss>