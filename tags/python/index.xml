<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on RyanKing&#39;s Blog</title>
    <link>http://ryanking8215.github.io/tags/python/</link>
    <description>Recent content in python on RyanKing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jan 2016 14:50:54 +0800</lastBuildDate>
    
	<atom:link href="http://ryanking8215.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python3.5 交叉编译</title>
      <link>http://ryanking8215.github.io/2016/python35-cross-compile/</link>
      <pubDate>Sun, 17 Jan 2016 14:50:54 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2016/python35-cross-compile/</guid>
      <description> 有一个嵌入式项目，尝试将python3.5.1移植到该平台。还未确定是否用python开发, 先把 环境整好，到时想用就能用了，也记录一下，可以用这种方法移植到其他平台。
问题 Python工程本来就有configure工具，理论上讲交叉编译比较简单，只要指定--host为你 的交叉编译工具链即可。其他基于autoconf/automake的也是类似的。但是Python比较特殊 的是，在交叉编译过程中，会生成Parse/Pgen和python应用程序，然后会运行该程序, 那么问题来了，交叉编译出来的程序在开发机上无法执行的，它们是运行在嵌入式系统上的。
查看网络上的解决方法:
 为Python工程打补丁
打补丁的方法只支持到3.2，新版本就没有了, 大意是先是用本地的编译器编译出python和pgen，改名，然后再是用 交叉编译工具编译，当然需要加入特殊的命令行参数来指定刚才编译出来的python和pgen。
 压根不处理
不处理的也有，就直接make就ok了，是python3.4+mips的环境，不明白怎么没碰到这个问题。
  看来要自己解决了。 尝试忽略执行该程序的过程，修改Makefile, 找到这部分，把它们注释掉， 继续make，最后ok了。 可能不是一个好方法，但是一个可行的方法。
参考 网上找了很多资料做参考，这里记录一下。
 交叉编译Python至嵌入式arm(支持import sqlite3,datetime等)&amp;mdash;&amp;ndash;Cross Compiling Python for Emb&amp;hellip; 交叉编译Python 3.3 压成1.5MB 为 Kindle 交叉编译 Zsh 和 Python 3.3  </description>
    </item>
    
    <item>
      <title>Django下通过form创建model对象如何隐藏不必要的field</title>
      <link>http://ryanking8215.github.io/2015/django-form-create-model-hidden-field/</link>
      <pubDate>Sun, 25 Oct 2015 10:00:00 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2015/django-form-create-model-hidden-field/</guid>
      <description>简述 例如Model A和Model S是一对多的关系，即A是one， S是many, 使用ForeignKey来定义
class A(models.Model): name = models.CharFields(max_length=64) class S(models.Model): name = models.CharFields(max_length=64) a = models.ForeignKey(A)  在某个页面创建S的时候，需要指定是哪个A。 如果为A和S注册了admin，那么在admin-site里创建S的时候，会看到需要选择哪个A的实例，它会把所有的A的记录都列出来
但这个是针对admin的，不是针对业务的，如果一个用户想为他名下的某个A资源建立一个S的资源，那么把所有A的记录都列出来是不合适的，也不安全；实际上例如POST /A/1/S/create这样的url已经含了A的主键，在创建S的时候只需要为a field赋值即可，而且是自动的，不需要用户选择。
策略 就是在创建S的时候，不能把a的field暴露出来，并且根据url里的A的主键，将a赋值为A.objects.get(pk=1)即可。
方法1 直接使用CreateView，model为S，form暴露的fields需要包括a，在获取form初始值时，将a赋值。form在render的时候，需要隐藏a field，需要自定义各form的field，不能使用form.as_p()等。
class SCreateView(CreateView): model = S fields = {&#39;name&#39;,&#39;a&#39;} success_url = &#39;myurl&#39; template_name = &#39;s_add.html&#39; def get(self, request, *args, **kwargs): # 这里根据url参数获取A的对象 self.a_object = A.objects.get(pk=kwargs[&#39;a_id&#39;]) def get_initial(self): # 这里这样默认的form里a field就有值了。 return {&#39;a&#39;:self.a_object.pk}  方法2 使用SignalObjectMixin和FormView的组合，SignalObjectMixin是为了获取A的对象，FormView用于处理form的get和post。特别是post，我们的Form不需要有a field，在form_valid()里，通过form.save(commit=False)来创建一个S对象，但是该对象还没有持久化，然后为该对象的a field赋值为self.object.pk(通过SignalObjectMixin)即可，然后调用s.save()即可。
class SForm(form.ModelForm): class Meta: model = S fields = {&#39;name&#39;} class SCreateView(SingleObjectMixin, FormView): model = A form_class = SForm def get(self, request, *args, **kwargs): self.</description>
    </item>
    
    <item>
      <title>python ctypes</title>
      <link>http://ryanking8215.github.io/2015/python-ctypes/</link>
      <pubDate>Sun, 20 Sep 2015 14:50:54 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2015/python-ctypes/</guid>
      <description> 项目中需要用到python来抓网络包进行分析，看了pip有现成的pcap库，但是没用过，我使用的pcap的接口很简单，所以就想自己封装一个。
函数接口通过指针传递数据，如何在python中hold住内存 有接口 pcap_next_ext(pcap_t *, pcap_pkthdr *, u_char **)
最后的参数即返回函数内部的内存指针，即该指针指向内部内存，该部分数据即收到的包，在处理协议时，需要对该数据包进行分析:
u_char * data; pcap_next_ext(pcap,&amp;amp;head,&amp;amp;data); eth_frame_t *eth = (eth_frame_t *)data; rest_data_t * mine = (rest_data_t *)(data+sizeof(*eth))  以上是c的调用实例，现在要用python来实现。
函数声明:
api.pcap_next_ext.argtypes = (ctypes.c_void_p,pcap_pkther_p, POINTER(POINTER(c_ubyte)))  这里用POINTER(POINTER(c_ubyte))来表示u_char **的类型，为什么不用 POINTER(c_char_p)呢，因为c_char_p是以NULL为结束的，所以分析二进制数据的时候，这个是不合适的，因为数据有可能为0,即’\0’,会被截断的。 调用：
data = POINTER(c_ubyte)() # u_char *data; api.pcap_next_ext(pcap,ctypes.byref(head),ctypes.byref(data))  这样，data就能hold住c function通过指针返回的数据了。 ctypes.byref(data)即 &amp;amp;data.
那如何使用data所指向的数据呢? 在python层，它认为是一个pointer, data有contents属性，值是第1个数据，即data[0],当然，我们可以通过data[i]访问索引为i的字节，和c指针一样，但如何强制转换呢？ eth_frame = ctypes.cast(data,eth_frame_p) 那之后的mine指针怎么赋值呢？
mine = ctypes.cast(data+eth_frame.size(),rest_data_p)  这样是不行的，我们需要得到data的地址，通过ctypes.addressof(data.contents) 这才是data指针的基地址，我们可以通过它来访问后续的内存
mine = ctypes.cast(ctypes.addressof(data.contents)+eth_frame.size(),rest_data_p)  </description>
    </item>
    
    <item>
      <title>资源，认证，鉴权和python的装饰器</title>
      <link>http://ryanking8215.github.io/2015/py-decorate/</link>
      <pubDate>Sun, 12 Apr 2015 16:50:54 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2015/py-decorate/</guid>
      <description>简述 这是一个目前在做的flask web项目的一点记录，基本思路是以python的装饰器为request handler加入资源描述，用户认证和鉴权的功能，这样，不用在每个request handler里都把这些代码调用一遍，以装饰器的模式，更加简便和美观，便于调试
下面描述几个概念
资源 这里的资源即人为设定的数据结构，用来描述该request handler会对系统的哪个资源进行什么样的操作。以restful api为例，你需要定义系统中有哪些 资源，该handler是做什么操作(CRUD)。以博客为例：
class Resource(enum.IntEnum): BLOG = 1 COMMENT = 2 class Operation(enum.IntEnum): C = 1&amp;lt;&amp;lt;0 R = 1&amp;lt;&amp;lt;1 U = 1&amp;lt;&amp;lt;2 D = 1&amp;lt;&amp;lt;3  用户登录之后，得到资源数据，即BLOG资源可以有哪些操作，COMMENT资源有哪些操作，然后和handler的资源描述一比较，就能得到权限结果。
认证和鉴权 好多人认为这是一个东西，有些web框架也会认为是一个，但是依本人愚见不是，认证是用户以用户凭证是否能登录进你的系统，而鉴权是用户认证完后得到的权限能做什么操作。 2者有先后的逻辑关系。认证的方法有好多种，目前的系统是通过Digest来认证，简单方便。
详细说说鉴权，用户登录完后，从系统中取出该用户的权限操作，我这里以dict[Resource] = operation_mask来保存，即权限是一个dict，记录每个资源的操作值。当访问restful api时， 和handler的资源描述比对，其实就是检查dict内是否有对应的资源，通过位操作判断是否有对应的操作权限。简单方便。
装饰器 有追求的python码农都会考虑通过装饰器来简化函数调用。如果不使用装饰器，代码应该是这样的：
def get_blog(): set_resource(BLOG,R) if not digest_authentication(): abort(401) if not authorization(): abort(403) # 继续处理  如果用装饰器，那么应该是这样的
@set_resource(BLOG,R) @digest_authentication @authorization def get_blog(): # 继续处理 pass  有追求的python码农不会满足于此，每个函数上有3个@,其实本人的项目都是json输出，最后还有@jsonify的装饰器，总共有4个，太多太杂，而且有先后顺序，容易错。 整成一个多好？</description>
    </item>
    
    <item>
      <title>pyramid and flask</title>
      <link>http://ryanking8215.github.io/2015/pyramid-and-flask/</link>
      <pubDate>Mon, 06 Apr 2015 16:13:40 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2015/pyramid-and-flask/</guid>
      <description>有个企业内部项目，restful api，mysql, digest authentication. python很早就用了，写一些维护的脚本和验证一些算法，简单明了，不用考虑c/c++的内存管理。 但是web开发还是第一次，事先了解了一些python下的web framework
 web.py bottle flask pyramid django  因为ORM使用sqlalchemy，所以先踢掉了django；web.py因为python3和创始人的原因，不再考虑；bottle太过简单，学习可以，用在工程上可能欠妥，也排除；留下了flask和pyramid，flask名气更响，资源更多，但是在简单了解了pyramid后，使用pyramid来开展项目，当然之后由于某些原因又换到了flask，所以把这2个框架的使用和区别做一些记录，以供参考，当然，由于初次接触web框架，难免会有疏漏和错误，望海涵。
路由 pyramid把url设置为一个唯一string,然后将hanlder绑定在该string上。几乎所有的配置均可通过装饰器解决，除了url本身，你可以指定method,query strings来绑定具体的handler，不用进一个进口，然后根据query stirng或者method来区分。
flask使用装饰器直接将url绑定在handler上，无论是使用app还是blueprint。支持继承view的方式来设定handler，我用的最多的就是MethodView。
模板 pyramid默认模板是mako；flask默认模板是jinjia2。按照jinjia2的说法，两者性能差不多，好像周遭用jinjia2的更多一点。两者均支持更换第三方模板。
pyramid支持将模板render功能写在装饰器里，而flask需要显式调用render_template(),我的项目返回json数据，pyramid支持内置的render=&#39;json&#39;,而flask需要显式调用jsonify,后来项目换成flask的时候，也如法炮制，将render做成了装饰器。
测试 两者的测试哲学不同。
pyramid因为处理函数返回的数据是dict，所以，它的测试是直接对处理函数测试，将req填好数据，然后直接调用处理函数，得到dict，再验证dict正确性。
flask需要一个请求上下文来测试，也可以说是模拟一个请求客户端，填入真正的url和数据，返回的也是真的数据，而不是中间数据。
各有利弊，pyramid的这种方式测不到路由是否正确，flask如果用模板render,得到html，验证数据比较麻烦。
python3支持 按照各自官网的说法，pyramid对python3完全支持。
flask本身支持，但是它认为好多add-on仍旧是python2,所以还是推荐python2.
更多 pyramid对web还有更多的框架定义，例如security,支持认证和权限等等。
flask更内聚一点，额外功能用addon实现。
总结 两者都是优秀的框架，项目换成flask不是因为flask比pyramid好，只是flask中文资源更多一点，因为初入web,找help更简单一点。 其实，pyramid的config装饰器功能强大，几乎配置均可以写在装饰器里，包括method，query string，render资源，不仅仅是url本身，我喜欢这种方式，似乎其他的web框架都没有这么强大的配置装饰器。 作为初入者，我不太明白为什么flask比pyramid更流行，从最后展现的框架上看，我认为pyramid更好，更符合工程需求，更完善。</description>
    </item>
    
  </channel>
</rss>