<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on RyanKing&#39;s Blog</title>
    <link>http://ryanking8215.github.io/tags/javascript/</link>
    <description>Recent content in javascript on RyanKing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Oct 2014 16:50:54 +0800</lastBuildDate>
    
	<atom:link href="http://ryanking8215.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>promise要注意的地方</title>
      <link>http://ryanking8215.github.io/2014/promise-careful/</link>
      <pubDate>Sun, 05 Oct 2014 16:50:54 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/promise-careful/</guid>
      <description>promise可以级联，但是不要忘记在then()中return一个Promise,否则将会并发执行。
do_a() .then(function(){ do_b() }) .then(function(){ do_c() })  VS.
do_a() .then(function(){ return do_b() }) .then(function(){ })  切记！</description>
    </item>
    
    <item>
      <title>promise处理数组</title>
      <link>http://ryanking8215.github.io/2014/promise-array/</link>
      <pubDate>Sun, 05 Oct 2014 16:47:03 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/promise-array/</guid>
      <description>promise 使用bluebird，现在要求按照数组顺序启动异步任务，也即等待一个promise被settled后再执行下一个。 有什么方法吗？难道按照数组写死一个个的then吗？ Promise.map() Promise.map() 是按顺序迭代数组，但是异步任务仍旧是并发执行的。不符合条件。
递归 var array = [&#39;a1&#39;,&#39;a2&#39;,&#39;a3&#39;,&#39;a4&#39;] return (function handle_array(idx){ idx = idx || 0 if (idx&amp;gt;=array.length) { return } return async_task(id,array[idx]) .then(function(result){ idx++; return handle_array(idx); }) })()  利用promise对象迭代 var promise = Promise.resolve() array.forEach(function(v){ console.log(v) promise = promise.then(function(){ return async_task(v) }) .then(function(v){ console.log(v) }) }) promise.then(function(){ console.log(&#39;done&#39;) })  可能还有其他方法。 个人感觉递归更自然一点。 第二种方法要记住promise可以先返回，但是按照顺序被resolved后再执行下一个的。</description>
    </item>
    
  </channel>
</rss>