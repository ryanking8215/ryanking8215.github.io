<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on RyanKing&#39;s Blog</title>
    <link>http://ryanking8215.github.io/tags/linux/</link>
    <description>Recent content in linux on RyanKing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jun 2014 22:20:00 +0800</lastBuildDate>
    
	<atom:link href="http://ryanking8215.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>不要strip ko文件</title>
      <link>http://ryanking8215.github.io/2014/dont-strip-ko/</link>
      <pubDate>Wed, 04 Jun 2014 22:20:00 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/dont-strip-ko/</guid>
      <description>闹乌龙啦&amp;hellip;</description>
    </item>
    
    <item>
      <title>pjsip的一些问题</title>
      <link>http://ryanking8215.github.io/2013/pjsip/</link>
      <pubDate>Wed, 05 Jun 2013 17:20:00 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2013/pjsip/</guid>
      <description>pjsip使用过程中总结的问题，不定时更新&amp;hellip;</description>
    </item>
    
    <item>
      <title>使用backtrace跟踪栈信息</title>
      <link>http://ryanking8215.github.io/2012/backtrace/</link>
      <pubDate>Fri, 04 May 2012 22:20:43 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2012/backtrace/</guid>
      <description>一种在嵌入式上可行的调试方法，截获SIGSEGV信号，并作backtrace()处理，把 调用栈信息打印出来。
#include &amp;lt;signal.h&amp;gt; #include &amp;lt;execinfo.h&amp;gt; int main(void) { signal(SIGSEGV,DebugBacktrace); } static void DebugBacktrace(int signal) { #define SIZE 100 void *array[SIZE]; int size,i; char **strings; char buf[50]; fprintf(stderr,&amp;quot;\nSegmentation fault \n&amp;quot;); size = backtrace(array,SIZE); fprintf(stderr,&amp;quot;Backtrace (%d deep):\n&amp;quot;,size); strings = backtrace_symbols(array,size); for(i = 0;i&amp;lt;size;i++) { fprintf(stderr,&amp;quot;%d: %s \n&amp;quot;,i,strings[i]); } free(strings); exit(-1); return ; } #=&amp;gt; 会将调用栈根据需要显示出来  比起core来，不需要占用很大的空间，但是貌似只能回溯调用栈，无法回溯当时的内存。</description>
    </item>
    
  </channel>
</rss>