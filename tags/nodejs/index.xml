<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on RyanKing&#39;s Blog</title>
    <link>http://ryanking8215.github.io/tags/nodejs/</link>
    <description>Recent content in nodejs on RyanKing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Nov 2014 21:20:12 +0800</lastBuildDate>
    
	<atom:link href="http://ryanking8215.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用n管理nodejs的版本</title>
      <link>http://ryanking8215.github.io/2014/n-nodejs-version/</link>
      <pubDate>Mon, 10 Nov 2014 21:20:12 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/n-nodejs-version/</guid>
      <description>想尝试一下ec6的generator和co,为了不影响原有的开发环境 使用n来管理nodejs的版本。
n的使用还是很简单的：
n latest n stable  分别安装最新发布版本和稳定版本，前者带有ec6支持，后者用于开发环境。 这2个都是安装的二进制版本，不需要编译。
单独使用n可以切换版本号，但我的目的是二者共存，n还有个命令：
n use &amp;lt;version&amp;gt;  只要把这个写个alias到shell里，就能共存啦：
alias nn=&amp;quot;n use 0.11.14 --harmony&amp;quot;  想尝试generator的，只要nn xxx.js就好啦！很方便。
p.s. 之前还用了一小会nvm，是从源码编译node的，在Linux上切换发生了点问题，具体 原因也不查了，it makes no sense. 感觉没n好用。</description>
    </item>
    
    <item>
      <title>nodejs的buffer和c string</title>
      <link>http://ryanking8215.github.io/2014/nodejs-buffer-c-string/</link>
      <pubDate>Fri, 31 Oct 2014 19:13:42 +0000</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/nodejs-buffer-c-string/</guid>
      <description>设备上有现成的二进制通信协议，nodejs作为客户端连接上去发送请求得到响应。 其中有协议是传送字符串，用c struct表示就是
struct Response { uint32_t value; char name[64]; };  因为c string以&amp;rsquo;\0&amp;rsquo;为结束，为了协议到c的对端能开箱即用，name最多存63个字节。
node客户端收到数据后，用buffer来处理，转换成response对象
{ value: {number} name: {string} }  buf转string的函数是 buf.toString()，但是得到的数据类似于
&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;\u0000&#39;,&#39;\u0000&#39;  因为js的string不是以&amp;rsquo;\0&amp;rsquo;结束，它把后面的都处理为字符串的一部分，所以我们要处理一下：
name = name.substring(0,name.indexOf(&#39;\u0000&#39;))  这样就ok了
编码问题 默认的hex和utf8,nodejs的buffer api都能处理，但是如果是其他编码呢？比如由于历史原因，设备上 传输的中文编码是gb2312。 很幸运的是，npm里有iconv-lite的package，它能将不同的编码从string-&amp;gt;buffer, buffer-&amp;gt;string的转换。 用它就能开心的撸了！</description>
    </item>
    
    <item>
      <title>如何使用nodejs撸一个tcp client</title>
      <link>http://ryanking8215.github.io/2014/nodejs-tcp-client/</link>
      <pubDate>Tue, 28 Oct 2014 22:20:00 +0800</pubDate>
      
      <guid>http://ryanking8215.github.io/2014/nodejs-tcp-client/</guid>
      <description>&lt;p&gt;单看话题有点low,用nodejs撸一个tcp client不是秒秒钟的事情
封装一个client，sock收到data后解析出msg，通过event通知调用端msg来了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var sock = net.createConnection(...);
sock.on(&#39;error&#39;,function(){
	
})
sock.on(&#39;data&#39;,function(buf){
	var msg = parse_data(buf)
	self.emit(&#39;msg&#39;,msg)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大意如此，不要在意细节。如果真是这样的话，那就没有必要撸这个博文了。&lt;/p&gt;

&lt;p&gt;首先要看封装的api到什么程度，client.sendRequest()之后如果什么都不干，光等msg过来，对于
调用你client库的主来说真的是苦主了，一般client都有业务逻辑在，例如先connect(),再login(),
然后再干嘛干嘛；也需要判断response，你都放在&lt;code&gt;client.on(&#39;msg&#39;,function(){...})&lt;/code&gt;里，让别人情何以堪。&lt;/p&gt;

&lt;p&gt;那应该怎么做呢？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>